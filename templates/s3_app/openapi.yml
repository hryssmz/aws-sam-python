openapi: "3.0.1"
info:
  title: sam-helloworld-python-HelloWorldApi
  version: "1.0"
servers:
  - url: https://{restApiId}.execute-api.{region}.amazonaws.com/{basePath}
    variables:
      restApiId:
        default: o9kvwjqpqf
      region:
        default: ap-northeast-1
      basePath:
        default: dev
paths:
  /buckets:
    get:
      operationId: GetBuckets
      responses:
        "200":
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBucketsResponse"
          headers:
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListBucketsFunction.Arn}/invocations
        httpMethod: POST
  /buckets/{bucket}:
    parameters:
      - $ref: "#/components/parameters/bucketParam"
    put:
      operationId: PutBucket
      responses:
        "201":
          description: 201 Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyObject"
          headers:
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
        "204":
          $ref: "#/components/responses/NoContent"
        "403":
          $ref: "#/components/responses/Forbidden"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateBucketFunction.Arn}/invocations
        httpMethod: POST
    delete:
      operationId: DeleteBucket
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteBucketFunction.Arn}/invocations
        httpMethod: POST
    get:
      operationId: GetBucket
      responses:
        "200":
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBucketResponse"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListObjectsFunction.Arn}/invocations
        httpMethod: POST
  /buckets/{bucket}/{key}:
    parameters:
      - $ref: "#/components/parameters/bucketParam"
      - $ref: "#/components/parameters/keyParam"
    put:
      operationId: PutObject
      requestBody:
        description: PutObject request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutObjectRequest"
      responses:
        "201":
          description: 201 Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyObject"
          headers:
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateObjectFunction.Arn}/invocations
        httpMethod: POST
    get:
      operationId: GetObject
      responses:
        "200":
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetObjectResponse"
          headers:
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetObjectFunction.Arn}/invocations
        httpMethod: POST
    delete:
      operationId: DeleteObject
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteObjectFunction.Arn}/invocations
        httpMethod: POST
components:
  schemas:
    EmptyObject:
      description: Empty object
      type: object
      properties: {}
      example: {}
    ClientError:
      description: Client error object
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
      example:
        code: ClientError
        message: Error message
    GetBucketsResponse:
      description: Response body for GET /buckets
      type: object
      required:
        - buckets
      properties:
        buckets:
          type: array
          items:
            type: string
      example:
        buckets:
          - my-bucket
          - another-bucket
    GetBucketResponse:
      description: Response body for GET /buckets/{bucket}
      type: object
      required:
        - objects
      properties:
        objects:
          type: array
          items:
            type: string
      example:
        objects:
          - foo.txt
          - bar/baz.png
    PutObjectRequest:
      description: Request body for PUT /buckets/{bucket}/{key}
      type: object
      required:
        - content
      properties:
        content:
          type: string
      example:
        content: sample file text content
    GetObjectResponse:
      description: Response body for GET /buckets/{bucket}/{key}
      type: object
      required:
        - content
      properties:
        content:
          type: string
      example:
        content: sample file text content
  parameters:
    bucketParam:
      name: bucket
      in: path
      description: S3 bucket name
      required: true
      schema:
        type: string
        example: my-bucket
    keyParam:
      name: key
      in: path
      description: S3 object key
      required: true
      schema:
        type: string
        example: foo.txt
  headers:
    Access-Control-Allow-Origin:
      description: Response header for CORS support
      schema:
        type: string
        example: "*"
  responses:
    NoContent:
      description: 204 No Content
      headers:
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
    BadRequest:
      description: 400 Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"
      headers:
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
    Forbidden:
      description: 403 Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"
      headers:
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
    NotFound:
      description: 404 Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"
      headers:
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
