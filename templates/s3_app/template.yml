# s3_app/template.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM App

Parameters:
  EnvironmentType:
    Type: String
    Description: API Gateway deployment stage
    Default: dev
    AllowedValues:
      - dev
      - prod

  Architecture:
    Type: String
    Description: Lambda CPU architecture
    Default: arm64
    AllowedValues:
      - arm64
      - x86_64

Globals:
  Function:
    Handler: app.handler
    Runtime: python3.9
    Timeout: 10
    Architectures:
      - Ref: Architecture

Resources:
  MyBucket:
    Type: AWS::S3::Bucket

  # REST API
  HelloWorldApi:
    Type: AWS::Serverless::Api
    Properties:
      Description: Hello World REST API
      StageName:
        Ref: EnvironmentType
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
      OpenApiVersion: "3.0.1"
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: aws-sam-python-HelloWorldApi
          version: "1.0"
        servers:
          - url: https://{restApiId}.execute-api.{region}.amazonaws.com/{basePath}
            variables:
              restApiId:
                default: example123
              region:
                default: ap-northeast-1
              basePath:
                default: dev
        paths:
          /objects:
            get:
              operationId: ListObjects
              responses:
                "200":
                  description: 200 OK
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ListObjectsResponse"
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListObjectsFunction.Arn}/invocations
                httpMethod: POST
          /objects/{key}:
            parameters:
              - $ref: "#/components/parameters/s3Key"
            put:
              operationId: PutObject
              requestBody:
                description: PutObject request body
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/PutObjectRequest"
              responses:
                "201":
                  description: 201 Created
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/EmptyObject"
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: "#/components/headers/Access-Control-Allow-Origin"
                "400":
                  $ref: "#/components/responses/BadRequest"
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateObjectFunction.Arn}/invocations
                httpMethod: POST
            get:
              operationId: GetObject
              responses:
                "200":
                  description: 200 OK
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/GetObjectResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: "#/components/headers/Access-Control-Allow-Origin"
                "404":
                  $ref: "#/components/responses/NotFound"
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetObjectFunction.Arn}/invocations
                httpMethod: POST
            delete:
              operationId: DeleteObject
              responses:
                "204":
                  $ref: "#/components/responses/NoContent"
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteObjectFunction.Arn}/invocations
                httpMethod: POST
        components:
          schemas:
            EmptyObject:
              description: Empty object
              type: object
              properties: {}
              example: {}
            ClientError:
              description: Client error object
              type: object
              required:
                - code
                - message
              properties:
                code:
                  type: string
                message:
                  type: string
              example:
                code: ClientError
                message: Error message
            ListObjectsResponse:
              description: Response body for GET /objects
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    type: string
              example:
                objects:
                  - foo.txt
                  - bar/baz.png
            PutObjectRequest:
              description: Request body for PUT /objects/{key}
              type: object
              required:
                - content
              properties:
                content:
                  type: string
              example:
                content: sample file text content
            GetObjectResponse:
              description: Response body for GET /objects/{key}
              type: object
              required:
                - content
              properties:
                content:
                  type: string
              example:
                content: sample file text content
          parameters:
            s3Key:
              name: key
              in: path
              description: S3 object key
              required: true
              schema:
                type: string
                example: foo.txt
          headers:
            Access-Control-Allow-Origin:
              description: Response header for CORS support
              schema:
                type: string
                example: "*"
          responses:
            NoContent:
              description: 204 No Content
              headers:
                Access-Control-Allow-Origin:
                  $ref: "#/components/headers/Access-Control-Allow-Origin"
            BadRequest:
              description: 400 Bad Request
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ClientError"
              headers:
                Access-Control-Allow-Origin:
                  $ref: "#/components/headers/Access-Control-Allow-Origin"
            Forbidden:
              description: 403 Forbidden
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ClientError"
              headers:
                Access-Control-Allow-Origin:
                  $ref: "#/components/headers/Access-Control-Allow-Origin"
            NotFound:
              description: 404 Not Found
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ClientError"
              headers:
                Access-Control-Allow-Origin:
                  $ref: "#/components/headers/Access-Control-Allow-Origin"

  # Lambda functions (REST API)
  ListObjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/s3_app/list_objects
      Description: List objects function
      Environment:
        Variables:
          MY_BUCKET:
            Ref: MyBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: GET
            Path: /objects
            RestApiId:
              Ref: HelloWorldApi

  CreateObjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/s3_app/create_object
      Description: Create object function
      Environment:
        Variables:
          MY_BUCKET:
            Ref: MyBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: PUT
            Path: /objects/{key}
            RestApiId:
              Ref: HelloWorldApi

  GetObjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/s3_app/get_object
      Description: Get object function
      Environment:
        Variables:
          MY_BUCKET:
            Ref: MyBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: GET
            Path: /objects/{key}
            RestApiId:
              Ref: HelloWorldApi

  DeleteObjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/s3_app/delete_object
      Description: Delete object function
      Environment:
        Variables:
          MY_BUCKET:
            Ref: MyBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: DELETE
            Path: /objects/{key}
            RestApiId:
              Ref: HelloWorldApi

  # Permissions
  ListObjectsFunctionMyBucketConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: ListObjectsFunction
      Destination:
        Id: MyBucket
      Permissions:
        - Read

  CreateObjectFunctionMyBucketConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: CreateObjectFunction
      Destination:
        Id: MyBucket
      Permissions:
        - Write

  GetObjectFunctionMyBucketConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: GetObjectFunction
      Destination:
        Id: MyBucket
      Permissions:
        - Read

  DeleteObjectFunctionMyBucketConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: DeleteObjectFunction
      Destination:
        Id: MyBucket
      Permissions:
        - Write

Outputs:
  HelloWorldApiId:
    Value:
      Ref: HelloWorldApi
  HelloWorldApiUrl:
    Value:
      Fn::Sub: https://${HelloWorldApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${HelloWorldApi.Stage}
  MyBucketName:
    Value:
      Ref: MyBucket
